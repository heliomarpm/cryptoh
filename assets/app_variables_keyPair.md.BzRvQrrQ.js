import{_ as e,c as i,o as s,ae as t}from"./chunks/framework.BeJRua5E.js";const c=JSON.parse('{"title":"Variable: keyPair","description":"","frontmatter":{},"headers":[],"relativePath":"app/variables/keyPair.md","filePath":"app/variables/keyPair.md","lastUpdated":null}'),r={name:"app/variables/keyPair.md"};function n(l,a,p,h,o,k){return s(),i("div",null,a[0]||(a[0]=[t(`<h1 id="variable-keypair" tabindex="-1">Variable: keyPair <a class="header-anchor" href="#variable-keypair" aria-label="Permalink to &quot;Variable: keyPair&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyPair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: object;</span></span></code></pre></div><p>Key pair generation functions for creating RSA key pairs.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h2 id="generate-key-pair" tabindex="-1">Generate Key Pair <a class="header-anchor" href="#generate-key-pair" aria-label="Permalink to &quot;Generate Key Pair&quot;">​</a></h2><h4 id="generate" tabindex="-1">generate() <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;generate()&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KeyPair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Generates a new 2048-bit RSA key pair and returns it as an object with <code>publicKey</code> and <code>privateKey</code> properties.</p><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<a href="./../interfaces/KeyPair"><code>KeyPair</code></a>&gt;</p><p>A Promise that resolves to an object with <code>publicKey</code> and <code>privateKey</code> properties, both as PEM-formatted strings.</p><h5 id="throws" tabindex="-1">Throws <a class="header-anchor" href="#throws" aria-label="Permalink to &quot;Throws&quot;">​</a></h5><p>Will throw an error if key generation fails.</p><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keyPair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptor.keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyPair.publicKey); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs the PEM-formatted public key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyPair.privateKey); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs the PEM-formatted private key</span></span></code></pre></div>`,15)]))}const y=e(r,[["render",n]]);export{c as __pageData,y as default};
