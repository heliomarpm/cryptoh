import{_ as a,c as e,o as r,ae as n}from"./chunks/framework.BeJRua5E.js";const f=JSON.parse('{"title":"@heliomarpm/cryptoh","description":"","frontmatter":{},"headers":[],"relativePath":"app/globals.md","filePath":"app/globals.md","lastUpdated":null}'),i={name:"app/globals.md"};function o(s,t,d,h,l,p){return r(),e("div",null,t[0]||(t[0]=[n('<h1 id="heliomarpm-cryptoh" tabindex="-1">@heliomarpm/cryptoh <a class="header-anchor" href="#heliomarpm-cryptoh" aria-label="Permalink to &quot;@heliomarpm/cryptoh&quot;">​</a></h1><h2 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><a href="./classes/default">default</a></td><td>Cryptographic functions for hashing, random number generation, and key pair generation.</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><a href="./variables/hash">hash</a></td><td>Hashing functions for generating and comparing hashes.</td></tr><tr><td><a href="./variables/keyPair">keyPair</a></td><td>Key pair generation functions for creating RSA key pairs.</td></tr><tr><td><a href="./variables/random">random</a></td><td>Random number generation functions for generating salts and random values.</td></tr><tr><td><a href="./variables/sign">sign</a></td><td>Digital signature functions for generating and verifying signatures.</td></tr></tbody></table><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><a href="./enumerations/HashAlgorithm">HashAlgorithm</a></td><td>Enum representing different hash algorithms. Currently supports SHA256, SHA512, and MD5.</td></tr><tr><td><a href="./interfaces/KeyPair">KeyPair</a></td><td>Represents a key pair consisting of a public key and a private key. The keys are represented as PEM-formatted strings.</td></tr></tbody></table>',7)]))}const m=a(i,[["render",o]]);export{f as __pageData,m as default};
