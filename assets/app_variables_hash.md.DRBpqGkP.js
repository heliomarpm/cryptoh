import{_ as s,c as e,o as i,ae as t}from"./chunks/framework.BeJRua5E.js";const c=JSON.parse('{"title":"Variable: hash","description":"","frontmatter":{},"headers":[],"relativePath":"app/variables/hash.md","filePath":"app/variables/hash.md","lastUpdated":null}'),h={name:"app/variables/hash.md"};function r(l,a,n,o,p,d){return i(),e("div",null,a[0]||(a[0]=[t(`<h1 id="variable-hash" tabindex="-1">Variable: hash <a class="header-anchor" href="#variable-hash" aria-label="Permalink to &quot;Variable: hash&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: object;</span></span></code></pre></div><p>Hashing functions for generating and comparing hashes.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h2 id="generate-hash" tabindex="-1">Generate Hash <a class="header-anchor" href="#generate-hash" aria-label="Permalink to &quot;Generate Hash&quot;">​</a></h2><h4 id="generate" tabindex="-1">generate() <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;generate()&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, algorithm): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Generates a hash for the given text using the specified hash algorithm.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="text" tabindex="-1">text <a class="header-anchor" href="#text" aria-label="Permalink to &quot;text&quot;">​</a></h6><p><code>string</code></p><p>The input text to hash.</p><h6 id="algorithm" tabindex="-1">algorithm <a class="header-anchor" href="#algorithm" aria-label="Permalink to &quot;algorithm&quot;">​</a></h6><p><a href="./../enumerations/HashAlgorithm"><code>HashAlgorithm</code></a> = <code>HashAlgorithm.SHA512</code></p><p>The hash algorithm to use. Defaults to SHA512.</p><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>A Promise that resolves to the generated hash as a hexadecimal string.</p><h5 id="throws" tabindex="-1">Throws <a class="header-anchor" href="#throws" aria-label="Permalink to &quot;Throws&quot;">​</a></h5><p>Will throw an error if the input text is empty or whitespace or if the algorithm is not supported.</p><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hashedValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptor.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myPassword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashedValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs the hashed value of &#39;myPassword&#39;</span></span></code></pre></div><h2 id="verify-hash" tabindex="-1">Verify Hash <a class="header-anchor" href="#verify-hash" aria-label="Permalink to &quot;Verify Hash&quot;">​</a></h2><h4 id="verify" tabindex="-1">verify() <a class="header-anchor" href="#verify" aria-label="Permalink to &quot;verify()&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   text, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   hash, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">algorithm): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Compares a given text with a hash to determine if they match.</p><h5 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="text-1" tabindex="-1">text <a class="header-anchor" href="#text-1" aria-label="Permalink to &quot;text&quot;">​</a></h6><p><code>string</code></p><p>The input text to compare.</p><h6 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h6><p><code>string</code></p><p>The hash to compare against.</p><h6 id="algorithm-1" tabindex="-1">algorithm <a class="header-anchor" href="#algorithm-1" aria-label="Permalink to &quot;algorithm&quot;">​</a></h6><p><a href="./../enumerations/HashAlgorithm"><code>HashAlgorithm</code></a> = <code>HashAlgorithm.SHA512</code></p><p>The hash algorithm used for generating the hash. Defaults to SHA512.</p><h5 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>boolean</code>&gt;</p><p>A Promise that resolves to <code>true</code> if the text matches the hash, <code>false</code> otherwise.</p><h5 id="throws-1" tabindex="-1">Throws <a class="header-anchor" href="#throws-1" aria-label="Permalink to &quot;Throws&quot;">​</a></h5><p>Will throw an error if the input text or hash is empty or whitespace.</p><h5 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isMatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptor.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myPassword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashedValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isMatch); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs true if the text matches the hash, otherwise false</span></span></code></pre></div>`,43)]))}const g=s(h,[["render",r]]);export{c as __pageData,g as default};
