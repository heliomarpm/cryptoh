import{_ as e,c as s,o as t,ae as i}from"./chunks/framework.BeJRua5E.js";const k=JSON.parse('{"title":"Variable: random","description":"","frontmatter":{},"headers":[],"relativePath":"app/variables/random.md","filePath":"app/variables/random.md","lastUpdated":null}'),n={name:"app/variables/random.md"};function l(r,a,h,o,p,d){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="variable-random" tabindex="-1">Variable: random <a class="header-anchor" href="#variable-random" aria-label="Permalink to &quot;Variable: random&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: object;</span></span></code></pre></div><p>Random number generation functions for generating salts and random values.</p><h2 id="type-declaration" tabindex="-1">Type declaration <a class="header-anchor" href="#type-declaration" aria-label="Permalink to &quot;Type declaration&quot;">​</a></h2><h2 id="generate-salt" tabindex="-1">Generate Salt <a class="header-anchor" href="#generate-salt" aria-label="Permalink to &quot;Generate Salt&quot;">​</a></h2><h4 id="generatesalt" tabindex="-1">generateSalt() <a class="header-anchor" href="#generatesalt" aria-label="Permalink to &quot;generateSalt()&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(length): </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Generates a cryptographically secure random salt value as a hexadecimal string.</p><h5 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h5><h6 id="length" tabindex="-1">length <a class="header-anchor" href="#length" aria-label="Permalink to &quot;length&quot;">​</a></h6><p><code>number</code> = <code>16</code></p><p>The length of the salt in bytes. Defaults to 16.</p><h5 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h5><p><code>Promise</code>&lt;<code>string</code>&gt;</p><p>A Promise that resolves to a hexadecimal string representing the generated salt.</p><h5 id="throws" tabindex="-1">Throws <a class="header-anchor" href="#throws" aria-label="Permalink to &quot;Throws&quot;">​</a></h5><p>Will throw an error if the length is less than or equal to 0.</p><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> salt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptor.random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salt); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Outputs a random hexadecimal string of length 16.</span></span></code></pre></div>`,19)]))}const g=e(n,[["render",l]]);export{k as __pageData,g as default};
