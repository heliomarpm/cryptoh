import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.BeJRua5E.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"app/index.md","filePath":"app/index.md","lastUpdated":null}'),n={name:"app/index.md"};function l(h,s,r,p,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<div id="top" align="center"><h1><br> Cryptography Helper <a href="https://navto.me/heliomarpm" target="_blank"><img src="https://navto.me/assets/navigatetome-brand.png" width="32"></a></h1></div><h2 id="📚-summary" tabindex="-1">📚 Summary <a class="header-anchor" href="#📚-summary" aria-label="Permalink to &quot;📚 Summary&quot;">​</a></h2><p>A clean and easy-to-use cryptography utility library for Node.js built on top of the native crypto module. It provides modern hashing, secure random generation, RSA key pair management, and digital signature utilities with a clean API.</p><h3 id="requirements" tabindex="-1">Requirements <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;Requirements&quot;">​</a></h3><ul><li>Node.js v16+</li></ul><h2 id="🚀-features" tabindex="-1">🚀 Features <a class="header-anchor" href="#🚀-features" aria-label="Permalink to &quot;🚀 Features&quot;">​</a></h2><ul><li>📌 Hash text values using SHA-1, SHA-256, SHA-512, and MD5</li><li>🔒 Compare hashed values securely using timingSafeEqual</li><li>🔑 Generate secure RSA 2048-bit key pairs</li><li>✍️ Create and verify digital signatures</li><li>🎲 Generate cryptographically secure random salts</li><li>📝 Fully typed with TypeScript</li></ul><h2 id="🔧-usage" tabindex="-1">🔧 Usage <a class="header-anchor" href="#🔧-usage" aria-label="Permalink to &quot;🔧 Usage&quot;">​</a></h2><p><strong>Install the library:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @heliomarpm/cryptoh</span></span></code></pre></div><h3 id="✏️-example-usage" tabindex="-1">✏️ Example Usage <a class="header-anchor" href="#✏️-example-usage" aria-label="Permalink to &quot;✏️ Example Usage&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh, { HashAlgorithm } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cryptoh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 👤 User registration (secure password storage)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;My$ecureP@ssword123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Generate a unique salt for the user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> salt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generateSalt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Concatenate password + salt and generate the hash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> hashedPassword</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salt, HashAlgorithm.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHA512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Salt:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, salt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hashed password:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, hashedPassword);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // You would typically save this salt and hashedPassword to your database</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> storedCredentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { salt, hashedPassword };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 👤 User login (password verification)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> passwordAttempt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;My$ecureP@ssword123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Recreate the hash with the stored salt and compare it to the stored hash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isPasswordValid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.hash.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    passwordAttempt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> storedCredentials.salt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    storedCredentials.hashedPassword,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HashAlgorithm.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHA512</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is password valid?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, isPasswordValid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true if matches</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 🔐 Digital signature for sensitive payload (e.g., tokens, receipts, or important data)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> payload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userId: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">789</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timestamp: Date.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Generate an RSA key pair</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">publicKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">privateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.keyPair.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Sign the payload with the private key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> signature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.sign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, privateKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Signature (base64):&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signature, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;base64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Verify the signature using the public key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isSignatureValid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cryptoh.sign.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(payload, signature, publicKey);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is signature valid?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, isSignatureValid); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true if signature matches</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="📚-api-reference" tabindex="-1">📚 API Reference <a class="header-anchor" href="#📚-api-reference" aria-label="Permalink to &quot;📚 API Reference&quot;">​</a></h2><h3 id="🔒-cryptoh-hash" tabindex="-1">🔒 cryptoh.hash <a class="header-anchor" href="#🔒-cryptoh-hash" aria-label="Permalink to &quot;🔒 cryptoh.hash&quot;">​</a></h3><ul><li><p>Hashes the given text using the specified algorithm (default: SHA-256). <br><code>generate(text: string, algorithm?: HashAlgorithm): Promise&lt;string&gt;</code></p></li><li><p>Securely compares a plain text value with a given hash. <br><code>verify(text: string, hash: string, algorithm?: HashAlgorithm): Promise&lt;boolean&gt;</code></p></li></ul><h3 id="🎲-cryptoh-random" tabindex="-1">🎲 cryptoh.random <a class="header-anchor" href="#🎲-cryptoh-random" aria-label="Permalink to &quot;🎲 cryptoh.random&quot;">​</a></h3><ul><li>Generates a cryptographically secure random salt as a hex string. Default length: 16 bytes. <br><code>generateSalt(length?: number): Promise&lt;string&gt;</code></li></ul><h3 id="🔑-cryptoh-keypair" tabindex="-1">🔑 cryptoh.keyPair <a class="header-anchor" href="#🔑-cryptoh-keypair" aria-label="Permalink to &quot;🔑 cryptoh.keyPair&quot;">​</a></h3><ul><li>Generates a 2048-bit RSA key pair with PEM encoding. <br><code>generate(): Promise&lt;{ publicKey: string, privateKey: string }&gt;</code></li></ul><h3 id="✍️-cryptoh-sign" tabindex="-1">✍️ cryptoh.sign <a class="header-anchor" href="#✍️-cryptoh-sign" aria-label="Permalink to &quot;✍️ cryptoh.sign&quot;">​</a></h3><ul><li><p>Generates a digital signature for the provided data using the private key. <br><code>generate(data: string, privateKey: string, algorithm?: HashAlgorithm): Promise&lt;string&gt;</code></p></li><li><p>Verifies the authenticity of a digital signature. <br><code>verify(data: string, signature: string, publicKey: string, algorithm?: HashAlgorithm): Promise&lt;boolean&gt;</code></p></li></ul><h2 id="📦-project-scripts" tabindex="-1">📦 Project Scripts <a class="header-anchor" href="#📦-project-scripts" aria-label="Permalink to &quot;📦 Project Scripts&quot;">​</a></h2><ul><li><code>npm run check</code> — runs formatter, linter and import sorting to the requested files</li><li><code>npm run format</code> — run the formatter on a set of files</li><li><code>npm run lint</code> — run various checks on a set of files</li><li><code>npm run test</code> — run unit tests</li><li><code>npm run test:c</code> — run unit tests with coverage</li><li><code>npm run docs:dev</code> — run documentation locally</li><li><code>npm run commit</code> - run conventional commits check</li><li><code>npm run release:test</code> — dry run semantic release</li><li><code>npm run build</code> — build library</li></ul><h2 id="📦-dependencies" tabindex="-1">📦 Dependencies <a class="header-anchor" href="#📦-dependencies" aria-label="Permalink to &quot;📦 Dependencies&quot;">​</a></h2><p>✅ Zero runtime dependencies — relies solely on Node.js native crypto module. <br> 🔄 All devDependencies are pinned to latest stable versions</p><h2 id="🤝-contributing" tabindex="-1">🤝 Contributing <a class="header-anchor" href="#🤝-contributing" aria-label="Permalink to &quot;🤝 Contributing&quot;">​</a></h2><p>We welcome contributions! Please read:</p><ul><li><a href="./_media/CODE_OF_CONDUCT">Code of Conduct</a></li><li><a href="./_media/CONTRIBUTING">Contributing Guide</a></li></ul><p>Thank you to everyone who has already contributed to the project!</p><a href="https://github.com/heliomarpm/cryptoh/graphs/contributors" target="_blank"><img src="https://contrib.nn.ci/api?repo=heliomarpm/cryptoh&amp;no_bot=true"></a><h6 id="made-with-contrib-nn" tabindex="-1">Made with <a href="https://contrib.nn.ci" target="_blank" rel="noreferrer">contrib.nn</a>. <a class="header-anchor" href="#made-with-contrib-nn" aria-label="Permalink to &quot;Made with [contrib.nn](https://contrib.nn.ci).&quot;">​</a></h6><h3 id="❤️-support-this-project" tabindex="-1">❤️ Support this project <a class="header-anchor" href="#❤️-support-this-project" aria-label="Permalink to &quot;❤️ Support this project&quot;">​</a></h3><p>If this project helped you in any way, there are several ways to contribute. <br> Help us maintain and improve this template:</p><p>⭐ Starring the repository <br> 🐞 Reporting bugs <br> 💡 Suggest features <br> 🧾 Improving the documentation <br> 📢 Share with others</p><p>💵 Supporting via GitHub Sponsors, Ko-fi, Paypal or Liberapay, you decide. 😉</p><div class="badges"><p><a href="https://bit.ly/paypal-sponsor-heliomarpm" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/donate%20on-paypal-1C1E26?style=for-the-badge&amp;labelColor=1C1E26&amp;color=0475fe" alt="PayPal"></a><a href="https://ko-fi.com/heliomarpm" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/kofi-1C1E26?style=for-the-badge&amp;labelColor=1C1E26&amp;color=ff5f5f" alt="Ko-fi"></a><a href="https://liberapay.com/heliomarpm" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/liberapay-1C1E26?style=for-the-badge&amp;labelColor=1C1E26&amp;color=f6c915" alt="Liberapay"></a><a href="https://github.com/sponsors/heliomarpm" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/GitHub%20-Sponsor-1C1E26?style=for-the-badge&amp;labelColor=1C1E26&amp;color=db61a2" alt="GitHub Sponsors"></a></p></div><h2 id="📝-license" tabindex="-1">📝 License <a class="header-anchor" href="#📝-license" aria-label="Permalink to &quot;📝 License&quot;">​</a></h2><p><a href="./_media/LICENSE">MIT © Heliomar P. Marques</a> <a href="#top">🔝</a></p><hr>`,39)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
