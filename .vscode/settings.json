{
  "deepscan.enable": true,
  "editor.formatOnSave": true,
  "typescript.validate.enable": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.biome": "explicit",
    "source.organizeImports.biome": "explicit"
  },
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      // "text": "Follow the Conventional Commits format strictly for commit messages in Portugues. Use the structure below:\n\n```\n<type>[optional scope]: <gitmoji> <description>\n\n[optional body]\n```\n\nGuidelines:\n\n1. **Type and Scope**: Choose an appropriate type (e.g., `feat`, `fix`) and optional scope to describe the affected module or feature.\n\n2. **Gitmoji**: Include a relevant `gitmoji` that best represents the nature of the change.\n\n3. **Description**: Write a concise, informative description in the header; use backticks if referencing code or specific terms.\n\n4. **Body**: For additional details, use a well-structured body section:\n   - Use bullet points (`*`) for clarity.\n   - Clearly describe the motivation, context, or technical details behind the change, if applicable.\n\nCommit messages should be clear, informative, and professional, aiding readability and project tracking."
      "text": "Generate commit messages in Conventional Commits format with gitmoji. Follow this exact structure:\n\n```\n<type>[optional scope]: <gitmoji> <description>\n\n[optional body]\n```\n\nExamples:\n- `feat(auth): :sparkles: add new login validation`\n- `fix(api): :bug: resolve user data fetch timeout`\n- `docs: :memo: update README installation steps`\n- `docs: :bookmark: add JSDoc comments to media component`\n- `style: :art: format code according to linting rules`\n- `refactor: :recycle: restructure video platform detection logic`\n\nTypes must be one of:\n- `feat`: A new feature\n- `fix`: A bug fix\n- `docs`: Documentation changes including README updates, JSDoc comments, and code documentation\n- `style`: Changes not affecting code functionality (formatting, whitespace, etc)\n- `refactor`: Code structure changes that neither fix bugs nor add features\n- `perf`: Code change that improves performance\n- `test`: Adding or correcting tests\n- `build`: Changes affecting build system or dependencies\n- `ci`: Changes to CI configuration such as GitHub Actions or Jenkins\n- `chore`: Other changes not modifying src or test files\n- `revert`: Reverting a previous commit\n\nAlways include a relevant gitmoji code at the start of the description. Match the gitmoji to the type of change.\n\nImportant: Use `docs` (with :bulb: or :memo:) for JSDoc additions/changes, not `refactor`.\n\nFor the body:\n- Use bullet points (`*`) for multiple items\n- Explain WHY the change was needed\n- Include relevant context or technical details\n\nEnsure the message is professional and clearly communicates the purpose of the commit in Portuguese.\""
    }
  ],
  "github.copilot.chat.reviewSelection.instructions": [
    {
      // "text": "Review the selected code and provide feedback. Ensure to check for:\n\n1. **Code Quality**: Look for clean, maintainable, and efficient code.\n2. **Functionality**: Ensure the code works as intended and meets the requirements.\n3. **Best Practices**: Check adherence to coding standards and best practices.\n4. **Security**: Identify any potential security vulnerabilities.\n5. **Performance**: Assess if the code is optimized for performance.\n6. **Documentation**: Ensure that the code is well-documented, including comments and JSDoc where necessary.\n7. **Testing**: Verify that appropriate tests are included and pass successfully.\n8. **Readability**: Ensure the code is easy to read and understand.\n\nProvide constructive feedback, highlighting both strengths and areas for improvement."
      "text": "Revise o código selecionado e forneça feedback em Português. Certifique-se de verificar:\n\n1. **Qualidade do código**: Procure por um código limpo, sustentável e eficiente.\n2. **Funcionalidade**: Certifique-se de que o código funcione conforme o esperado e atenda aos requisitos.\n3. **Melhores práticas**: Verifique a adesão aos padrões de codificação e às melhores práticas.\n4. **Segurança**: Identifique possíveis vulnerabilidades de segurança.\n5. **Desempenho**: Avalie se o código está otimizado para desempenho.\n6. **Documentação**: Certifique-se de que o código esteja bem documentado, incluindo comentários e JSDoc quando necessário.\n7. **Testes**: Verifique se os testes apropriados estão incluídos e foram aprovados.\n8. **Legibilidade**: Certifique-se de que o código seja fácil de ler e entender. Forneça feedback construtivo, destacando os pontos fortes e as áreas a serem aprimoradas."
    }
  ],
}
